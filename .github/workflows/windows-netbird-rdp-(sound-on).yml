name: Windows RDP via NetBird (ON)

on:
  workflow_dispatch:
    inputs:
      rdp_user:
        description: "RDP Username"
        required: false
        default: "NbUser"
      rdp_pass:
        description: "RDP Password"
        required: false
        default: "NbPass@123"
      runtime_minutes:
        description: "RDP Alive Minutes (max 355)"
        required: false
        default: "355"

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:

    - name: Install NetBird agent
      shell: pwsh
      run: |
        $url = "https://pkgs.netbird.io/windows/x64"
        $dst = "$env:TEMP\netbird-installer.exe"
        Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
        Start-Process -FilePath $dst -ArgumentList "/S" -Wait

    - name: Connect runner to NetBird using setup key
      shell: pwsh
      run: |
        & "C:\Program Files\NetBird\netbird.exe" up --setup-key "${{ secrets.NETBIRD_SETUP_KEY }}"
        & "C:\Program Files\NetBird\netbird.exe" status

    - name: Create RDP User and Enable RDP
      shell: pwsh
      run: |
        $u = "${{ github.event.inputs.rdp_user }}"
        $p = "${{ github.event.inputs.rdp_pass }}"
        $sec = ConvertTo-SecureString $p -AsPlainText -Force
        if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
          New-LocalUser -Name $u -Password $sec -AccountNeverExpires
          Add-LocalGroupMember -Group Administrators -Member $u
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
        } else {
          Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
          Enable-LocalUser -Name $u
        }
        Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

    - name: Enable Windows Audio Service
      shell: pwsh
      run: |
        Set-Service -Name "Audiosrv" -StartupType Automatic
        Start-Service -Name "Audiosrv"

    - name: Ensure Chocolatey is installed
      shell: pwsh
      run: |
        if (-not (Test-Path "C:\ProgramData\chocolatey\bin\choco.exe")) {
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }

    - name: Downloading & Installing Essentials (via Chocolatey)
      shell: pwsh
      run: |
        choco install telegram.install -y
        choco install winrar -y
        choco install speedtest -y

    - name: Show NetBird IP
      shell: pwsh
      run: |
        & "C:\Program Files\NetBird\netbird.exe" status | Select-String "NetBird IP"

    - name: Keep RDP Session Alive
      shell: pwsh
      run: |
        $runtime = [int]"${{ github.event.inputs.runtime_minutes }}"
        if ($runtime -gt 355) { $runtime = 355 }
        $end = (Get-Date).AddMinutes($runtime)
        while ((Get-Date) -lt $end) {
          $left = [math]::Ceiling(($end - (Get-Date)).TotalMinutes)
          Write-Host "RDP alive... ($left min left)"
          Start-Sleep -Seconds 60
          
